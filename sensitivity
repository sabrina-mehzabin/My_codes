##------SENSITIVITY ANALYSIS-----------------
#----------STEP 1: GETTING 10DATASETS FROM OUTDEOPTIM FOR 2015-2021 AND 2010-2021 FOR LOC_FERISSBURG-----------
#LOC_Ferrisburg_2010, is the  name of folder for LOC_ferrisburg 2010-2021 SWAT initialization
#LOC_Ferrisburg_2015, is the  name of folder for LOC_ferrisburg 2015-2021 SWAT initialization
library(EcoHydRology)
library(SWATmodel)
library(diffobj)
flowgage_id="04282650" #Little Otter Creek at Ferrisburg, VT.
flowgage=get_usgs_gage(flowgage_id,begin_date = "2010-01-01",end_date= "2023-01-01")
flowgage$flowdata$Qm3ps= flowgage$flowdata$flow/24/3600 #m3/s
######remove extreme datapoint
max(flowgage$flowdata$Qm3ps)
#flowgage$flowdata=subset(flowgage$flowdata, flowgage$flowdata$Qm3ps<30)
plot(flowgage$flowdata$mdate, flowgage$flowdata$Qm3ps)

#setwd("~")
#dir.create("~/Calibaug31_23")
setwd("~/Calibaug31_23")
list.files("~/calibaug31/TxtInOut/")
file.copy(list.files("~/calibaug31/",full.names = TRUE,recursive = TRUE),"~/Calibaug31_23/",recursive = TRUE)
source('~/ecohydrology/pkg/SWATmodel/R/readSWAT.R')
save(readSWAT,file="readSWAT.R")

########load calib params
change_params=""
rm(change_params)
load(paste(path.package("EcoHydRology"), "data/change_params.rda", sep = "/"))
calib_range=c("2010-01-01","2023-01-01")
params_select=c(1,2,3,4,5,6,7,8,9,10,11,14,19,21,23,24,32,33)
calib_params=change_params[params_select,]
#calib_params$current[2]=0.5
calib_params$min[9]=0
calib_params$min[10]=0
calib_params$current[9]=2.5
calib_params$current[10]=2.5
calib_params$min[11]=0.01
calib_params$max[11]=1
calib_params$min[13]=40
calib_params$max[13]=95
calib_params$min[14]=0.3
calib_params$max[14]=3
#calib_params$min[15]=0.3
#calib_params$max[15]=3
calib_params$min[15]=0.3
calib_params$max[15]=3
calib_params$min[16]=0.3
calib_params$max[16]=3
calib_params$max[2]=2
calib_params$max[3]=600
calib_params$max[4]=0.3
calib_params$min[2]=0
calib_params$max[2]=1
calib_params$current[2]=0.5
calib_params[c(9,10),4]=0
calib_params[c(9,10),6]=2.5
calib_params[11,5]=1
calib_params[11,6]=.5
calib_params$min[1]=0
#wd=paste0('~/Calibaug31_23/')
#dir.create(wd)
#setwd(wd)
#save(readSWAT,file="readSWAT.R")
levels(calib_params$parameter)[2]= 'ALPHA_BF '
calib_params[1:7]
setup_swatcal(calib_params)
rch=5

# Test calibration
x=calib_params$current
source('~/ecohydrology/pkg/EcoHydRology/R/swat_objective_function_rch.R')


swat_objective_function_rch(x,calib_range,calib_params,flowgage,rch,save_results=F)
cl <- parallel::makeCluster(18)
parallel::clusterEvalQ(cl, {
  library(SWATmodel)
  library(dplyr)
  library(EcoHydRology)
  library(base)
  library(topmodel)
  library(utils)
})
set.seed(1234)
Sys.setenv(OPENBLAS_NUM_THREADS = 1)
outDEoptim<-DEoptim(swat_objective_function_rch,calib_params$min,calib_params$max,
                    DEoptim.control(cluster=cl,strategy = 6,NP = 18,itermax=300,parallelType = "parallel",
                                    packages = c("SWATmodel","dplyr","EcoHydRology","base","topmodel","utils","cl"),
                                    parVar=c("%<%","NSeff","read.fortran","readSWAT","alter_files")),
                    calib_range,calib_params,flowgage,rch)
x=outDEoptim$optim$bestmem
filename=format(Sys.time(), "%Y%m%d%H%M_outDEoptim.RData")
assign(filename,outDEoptim)
save(outDEoptim,file=format(Sys.time(), "~/Calibration2/%Y%m%d%H%M_outDEoptim.RData"))

setwd("~/Calibration2/")
files_to_load <- list.files(pattern = "20230902*")
print(files_to_load)
load(files_to_load[1])
ls()
str(outDEoptim)
print(outDEoptim$member$bestvalit)

#if (!exists("NSE")){ 
NSE = data.frame(1 - outDEoptim$member$bestvalit)
head(NSE)
colnames(NSE)[1] <- "NSE"

save(readSWAT,file="readSWAT.R")

rm(list = c("BestMemit"))
if (!exists("BestMemit")){ 
  BestMemit=data.frame(outDEoptim$member$bestmemit)
} 


dev.off()

par(mar=c(3,3,1,1))

# Simplify the layout
#layout(matrix(1:18, 6, 3))

dim(BestMemit)
for (i in 1:18){
  plot(BestMemit[,i], ylab= "",xlab="",ylim=c(calib_params$min[i],calib_params$max[i]),cex=0.3)
  axis(1,font = 2)
  axis(2,font = 2)
  mtext(side=1, line=2, "iteration", col="black",cex=1)
  mtext(side=2, line=3, calib_params$parameter[i], col="black", font=2, cex=1)
  
  if (i + 1 <= 18) {
    points(BestMemit[,i+1], col=2, cex=0.3)
  }
  if (i + 2 <= 18) {
    points(BestMemit[,i+2], col=3, cex=0.3)
  }
  
}

# Reset the graphical device
png("output.png", width=1200, height=800)
par(mfrow=c(6,3), mar=c(2,4.5,1,1))  # or even 4 if needed
for (i in 1:18){
  plot(BestMemit[,i], ylab= "",xlab="",ylim=c(calib_params$min[i],calib_params$max[i]),cex=1)
  axis(1,font = 2)
  axis(2,font = 2)
  mtext(side=1, line=2, "iteration", col="black",cex=1)
  mtext(side=2, line=3, calib_params$parameter[i], col="black", font=2, cex=1)
}
dev.off()

#####percent changes

#####percent changes
setwd('~/Calibration2/')
# Removing unnecessary variables
rm(list = c("myx","tmpdf3","percentchange"))

# Loading and accumulating percentage changes
for(i in list.files(pattern = "20230902*")){
  load(i)
  if (!exists("myx")){ 
    myx = data.frame(outDEoptim$member$bestmemit)
    myx$NSE = 1-outDEoptim$member$bestvalit
    percentchange = ((tail(myx,-1) - myx[1:(length(myx[,1])-1),])) / (myx[1:(length(myx[,1])-1),]) * 100
  } else { 
    tmpdf3 = data.frame(outDEoptim$member$bestmemit)
    tmpdf3$NSE = 1-outDEoptim$member$bestvalit      
    deltatmp1 = ((tail(tmpdf3,-1) - tmpdf3[1:(length(tmpdf3[,1])-1),])) / (tmpdf3[1:(length(tmpdf3[,1])-1),]) * 100
    myx = rbind(myx, tmpdf3)
    percentchange = rbind(percentchange, deltatmp1)
  }
}

colors <- rainbow(10)
png(filename = "percent_changes_plot.png", width = 2400, height = 1500, res = 300)

# Adjust the margins (mar) and outer margins (oma)
par(mar = c(2.5, 2.5, 1, 1), oma = c(1, 1, 1, 1))

# Adjust the layout matrix to give more space to each plot
layout(matrix(1:18, 3, byrow = TRUE), heights = c(rep(3, 3)))

for (i in 1:18) {
  plot(percentchange[,i], percentchange$NSE, ylim = c(0, 100), ylab = "", xlab = "",
       col = colors, pch = 19, cex = 0.5, 
       main = paste0("%Changes in ", calib_params$parameter[i]), 
       font.main = 1, cex.main = 0.5, cex.axis = 0.5, cex.lab = 0.6)
  mtext(side = 2, line = 1.8, "%changes NSE", col = "black", font = 2, cex = 0.5)
}

dev.off()



############
#setwd("~")
rm(list = c("myx","tmpdf","deltaparams"))
#for(i in list.files(pattern = "20230826*")){
load(list.files(pattern = "20230902*"))
if (!exists("myx")){ 
  myx=data.frame(outDEoptim$member$bestmemit)
  myx$NSE=1-outDEoptim$member$bestvalit
  deltaparams=(tail(myx,-1)-myx[1:(length(myx[,1])-1),])
  myx=tail(myx,-1)
}

initialvalues=myx[1:(length(myx[,1])-1),]

for (i in colnames(deltaparams)){
  #i="CNavg"
  nam = paste0("junkpar_",i)
  assign(nam,deltaparams[!deltaparams[,fmatch(i,names(deltaparams))]==0,] )
  nam2=paste0("initialval_",i)
  assign(nam2,initialvalues[!deltaparams[,fmatch(i,names(deltaparams))]==0,])
  nam3=paste0("Sr_",i)
  assign(nam3,abs(((get(paste0("junkpar_",i))$NSE)/
                     (get(paste0("junkpar_",i))[fmatch(i,names(deltaparams))]))*
                    (get(paste0("initialval_",i))[fmatch(i,names(deltaparams))]/
                       get(paste0("initialval_",i))$NSE)))
}

######## Sensitive Params
##################################
rm(list = c("tmpdf","outDEoptim","deltatmp","i"))
# Finding Columns/Params that can  be removed
junk= deltaparams[(rowSums(deltaparams[,1:18]>0)>0)&deltaparams$NSE==0,]
rmparams=colnames(junk[colSums(junk)!=0])
calib_params$parameter[colSums(junk)==0]
X=myx[deltaparams$NSE!=0,!(names(myx) %in% rmparams)]
X=X[1:(length(X)-1)]
sensparamcols=which(colSums(junk)==0)[1:(length(which(colSums(junk)==0))-1)]
sensitivity_params=calib_params[sensparamcols,]

# Extract columns based on their names, not indices
myx = myx[, names(myx) %in% names(sensparamcols)]

calib_params$parameter[c(1,2,6,7,8,9,10,11,13,14,15,16,17,18)]

colnames(myx)=calib_params$parameter[c(1,2,6,7,8,9,10,11,13,14,15,16,17,18)]

# print(sensparamcols)
# print(ncol(myx))
# print(colnames(myx))
# print(class(sensparamcols))
# print(head(junk))
# ncol(myx)
# length(calib_params$parameter[c(1,2,6,7,8,9,10,11,12,13,14,15,16,17,18)])


summary(myx)
RelSensi=base::as.data.frame(stack(list(ALPHA_BF=Sr_par2$par2,SMFMX=Sr_par9$par9,CN2=Sr_par13$par13,Ksat=Sr_par16$par16,TIMP=Sr_par11$par11,
                                        Depth=Sr_par14$par14,GW_DELAY=Sr_par1$par1,AW=Sr_par15$par15,ESCO=Sr_par17$par17,SURLAG=Sr_par12$par12,
                                        RCHRG_DP=Sr_par6$par6,GWQMN=Sr_par3$par3,EPCO=Sr_par18$par18,SMFMN=Sr_par10$par10,SMTMP=Sr_par8$par8,
                                        SFTMP=Sr_par7$par7
)))

# load the library
library(forcats)
library(ggplot2)
library(dplyr)
#

###########################################################################
#### violin + boxplot + mean 
#######################

dev.off()
names(RelSensi)[2]="Parameter"
library(ggplot2)
# Basic violin plot
png("Relative sensitivity.png", width=1500, height=1000)
RelSensi$values[is.na(RelSensi$values)] <- 0  # replace NA with 0

# Create the main plot
p <- ggplot(RelSensi, aes(x=Parameter, y=values, color=Parameter)) +
  geom_violin(trim=TRUE, fill='#A4A4A4', color="darkred") +
  geom_boxplot(width=0.1) +
  theme(legend.position = "None")

# Add summary statistics and labels
p <- p + stat_summary(fun.y=mean, geom="point", shape=8, size=2, col="black") +
  xlab("Parameter") +
  ylab("Relative Sensitivity") +
  theme(
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1, vjust = 1),  # Adjust size and angle here
    axis.text.y = element_text(size = 15, face = "bold"),
    axis.title = element_text(size = 17, face = "bold")
  )

# Display the plot
print(p)

# Save the plot
ggsave("Relative_sensitivity.png", plot = p, width = 15, height = 10)

# Close the graphics device
dev.off()
